<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Program
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:sim="urn:schemas-www-wisware.nl-xmlscripting-simulateuserinput"
  >
  <pkg:ReportTargets>
    <pkg:Target Identifier="Default" Description="Report"/>
    <pkg:Target Identifier="Visa" Description="Visa report"/>
  </pkg:ReportTargets>
  <pkg:Config>
    <![CDATA[
[Check]
; Set to 1 if these are all correct.
ValidParameters=0

[Config]
OutputDirectory=C:\WaveCapture

[VISA]
;scope = dns, can be replace with ip-adress
ScopeRN=TCPIP0::scope::inst0::INSTR]]>
  </pkg:Config>
  <Imports>
    <Import Identifier="VISAInstrument" Filename="..\Script.Common.VISA\VISA Instrument.xml"/>
    <Import Identifier="SiglentSDS1104X" Filename="..\Script.Common.VISA\VISA Siglent SDS1104X.xml"/>
    <Import Identifier="SampleProcessing" Filename="..\Script.Common.VISA\SampleProcessing.xml"/>
  </Imports>
  <Uses>
    <Use Identifier="VISAInstrument"/>
    <Use Identifier="SiglentSDS1104X"/>
    <Use Identifier="SampleProcessing"/>
  </Uses>

  <Variables>
    <Variable Identifier="ScopeRN" Type="string" Init="'TCPIP0::scope::inst0::INSTR'"/>
    <Variable Identifier="OutputDirectory" Type="string" Init="'C:\Traces'"/>
    <Variable Identifier="Scope" Type="TSiglentSDS1104X"/>
    <Variable Identifier="FrameHighIndex" Type="Int64"/>
    <Variable Identifier="SaveOptions" Type="TSaveRawSamplesOptions"/>
  </Variables>

  <Procedures>
    <Procedure Identifier="ReadConfig">
      <Constants>
        <Constant Identifier="secVISA" Type="string"  Expression="'VISA'"/>
        <Constant Identifier="secCheck" Type="string"  Expression="'Check'"/>
        <Constant Identifier="secConfig" Type="string"  Expression="'Config'"/>
        <Constant Identifier="keyValidParameters" Type="string"  Expression="'ValidParameters'"/>
        <Constant Identifier="keyOutputDirectory" Type="string"  Expression="'OutputDirectory'"/>
        <Constant Identifier="keyScopeRN" Type="string"  Expression="'ScopeRN'"/>
      </Constants>
      <Block>
        <rep:Reporter.Information Text="Format('[%s]', secCheck)" Markup="Header3"/>
        <Variable Identifier="ValidParameters" Type="Boolean" Init="ConfigInifile.ReadBool(secCheck, keyValidParameters, false)"/>
        <rep:Reporter.Information Text="Format('%s=%s', keyValidParameters, IfElse(ValidParameters, '1', '0'))"/>

        <rep:Reporter.Information Text="''"/>
        <rep:Reporter.Information Text="Format('[%s]', secConfig)" Markup="Header3"/>
        <Execute Statement="OutputDirectory:= ConfigInifile.ReadString(secConfig, keyOutputDirectory, OutputDirectory) "/>
        <rep:Reporter.Information Text="Format('%s=%s', keyOutputDirectory, OutputDirectory)"/>

        <rep:Reporter.Information Text="''"/>
        <rep:Reporter.Information Text="Format('[%s]', secVISA)" Markup="Header3"/>
        <Execute Statement="ScopeRN:= ConfigInifile.ReadString(secVISA, keyScopeRN, ScopeRN) "/>
        <rep:Reporter.Information Text="Format('%s=%s', keyScopeRN, ScopeRN)"/>

        <Raise Expression="Exception.Create('Please check the config and set validparameters=1')" Condition="not ValidParameters"/>
      </Block>
    </Procedure>

    <Procedure Identifier="WaveCapureToFile">
      <Parameters>
        <Parameter Identifier="Trace" Type="TTraceType"/>
        <Parameter Identifier="Filename" Type="string"/>
      </Parameters>
      <Block>
        <Variable Identifier="TraceIDStr" Type="string" Init="Scope.TraceID[Trace]"/>
        <sts:Status.Block Text="Format('Capturing %s to &quot;%s&quot;', TraceIDStr, Filename)" LeaveText="Format('Done capturing %s to &quot;%s&quot;', TraceIDStr, Filename)">
          <rep:Reporter.Information Text="Format('Capturing %s to &quot;%s&quot;', TraceIDStr, Filename)"/>
          <Object.Use Identifier="DSOSamples" Type="TMultiFrameAcquisitionInfo" Expression="Scope.GetMultiFrameSamples(Trace, FrameHighIndex, ObjNil)">
            <ExitOnAbortRequest/>
            <sts:Status.Block Text="Format('Saving to &quot;%s&quot;', Filename)" LeaveText="Format('Done saving to &quot;%s&quot;', Filename)">
              <Execute Statement="SaveRawSamplesToFile(DSOSamples, Filename, SaveOptions)"/>
              <rep:Reporter.Information Text="'File saved'"/>
              <rep:Reporter.Information Text="''"/>
            </sts:Status.Block>
          </Object.Use>
        </sts:Status.Block>
      </Block>
    </Procedure>

    <Procedure Identifier="Execute">
      <Block>
        <rep:Reporter.Information Text="'Capture traces'" Markup="Header1"/>
        <rep:Reporter.Information Text="''"/>
        <rep:Reporter.Information Text="'Config report'" Markup="Header2"/>
        <rep:Reporter.Information Text="''"/>
        <Execute Statement="ReadConfig"/>
        <rep:Reporter.Information Text="''"/>

        <ExitOnAbortRequest/>
        <Object.Use Identifier="VisaRM" Type="TVisaResourceManager" Expression="TVisaResourceManager.Create">
          <Object.Use Identifier="ScopeSession" Type="TVisaResource" Expression="VisaRM.OpenResource(ScopeRN, TAccessMode.NO_LOCK, 1000)">
            <Object.Use Identifier="Scope" Type="TSiglentSDS1104X" Expression="TSiglentSDS1104X.Create(ScopeSession)" LocalVariable="false">
              <Object.Use Identifier="SaveOptions" Type="TSaveRawSamplesOptions" Expression="TSaveRawSamplesOptions.Create" LocalVariable="false">
                <rep:Reporter.Information Text="'Capturing waveforms'" Markup="Header2"/>
                <rep:Reporter.Information Text="'Using ' + Scope.IDN"/>
                <rep:Reporter.Information Text="''"/>
                <Execute Statement="Scope.CommHeader:= THeaderType.Off"/>
                <Execute Statement="SaveOptions.DiscardExtremesPercentage:= 0"/>
                <Execute Statement="SaveOptions.WriteMinValue:= True"/>
                <Execute Statement="SaveOptions.WriteMaxValue:= True"/>
                <Variable Identifier="DirectoryPath" Type="string" Init="ExcludeTrailingPathDelimiter(OutputDirectory)"/>
                <syu:CreateDirectory Path="DirectoryPath"/>
                <Execute Statement="Scope.ScreenCapureToFile(DirectoryPath + '\Screen capture.png', TImageType.PNG)"/>
                <ExitOnAbortRequest/>
                <Execute Statement="Scope.HistoryMode:= False"/>
                <Execute Statement="Scope.HistoryMode:= True"/>
                <Execute Statement="FrameHighIndex:= Scope.ActiveFrame"/>
                <Execute Statement="WaveCapureToFile(TTraceType.CH1, DirectoryPath + '\CH1.xml')" Condition="Scope.Enabled[THWTraceType.CH1]"/>
                <ExitOnAbortRequest/>
                <Execute Statement="WaveCapureToFile(TTraceType.CH2, DirectoryPath + '\CH2.xml')" Condition="Scope.Enabled[THWTraceType.CH2]"/>
                <ExitOnAbortRequest/>
                <Execute Statement="WaveCapureToFile(TTraceType.CH3, DirectoryPath + '\CH3.xml')" Condition="Scope.Enabled[THWTraceType.CH3]"/>
                <ExitOnAbortRequest/>
                <Execute Statement="WaveCapureToFile(TTraceType.CH4, DirectoryPath + '\CH4.xml')" Condition="Scope.Enabled[THWTraceType.CH4]"/>
                <ExitOnAbortRequest/>

                <Block Condition="not FileExists(DirectoryPath + '\WaveForm.xsd')">
                  <Variable Identifier="ScriptPath" Type="string" Init="ExtractFilePath(ScriptFilename)"/>
                  <Variable Identifier="ResourceDirectory" Type="string" Init="GetFilenameFromBase(ScriptPath, '..\Resources.Project')"/>
                  <Variable Identifier="SourceFilename" Type="string" Init="ExpandFileName(ResourceDirectory + '\WaveForm.xsd')"/>
                  <Variable Identifier="TargetFilename" Type="string" Init="ExpandFileName(DirectoryPath + '\WaveForm.xsd')"/>
                  <syu:CopyFile SourceFilename="SourceFilename" TargetFilename="TargetFilename"/>
                </Block>

              </Object.Use>
            </Object.Use>
          </Object.Use>
        </Object.Use>
      </Block>
    </Procedure>
  </Procedures>

  <Block>
    <sts:Status.Block Text="'Executing script'" LeaveText="'Done executing script'">
      <Execute Statement="DoReportVisa:= IsDebugging"/>
      <Execute Statement="Execute"/>
    </sts:Status.Block>
  </Block>
</pkg:Program>