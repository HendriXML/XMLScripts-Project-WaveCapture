<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Program
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:sim="urn:schemas-www-wisware.nl-xmlscripting-simulateuserinput"
  >
  <pkg:ReportTargets>
    <pkg:Target Identifier="Default"/>
  </pkg:ReportTargets>
  <pkg:Config>
    <![CDATA[
[Check]
; Set to 1 if these are all correct.
ValidParameters=0

[Config]
OutputDirectory=C:\WaveCapture

[VISA]
;scope = dns, can be replace with ip-adress
ScopeRN=TCPIP0::scope::inst0::INSTR]]>
  </pkg:Config>
  <Imports>
    <Import Identifier="VISAInstrument" Filename="..\Script.Common.VISA\VISA Instrument.xml"/>
    <Import Identifier="SiglentSDS1104X" Filename="..\Script.Common.VISA\VISA Siglent SDS1104X.xml"/>
  </Imports>
  <Uses>
    <Use Identifier="VISAInstrument"/>
    <Use Identifier="SiglentSDS1104X"/>
  </Uses>
  
  <Variables>
    <Variable Identifier="ResourceManager" Type="IResourceManager3" Init="CoResourceManager.Create"/>
    <Variable Identifier="ScopeRN" Type="string" Init="'TCPIP0::scope::inst0::INSTR'"/>
    <Variable Identifier="OutputDirectory" Type="string" Init="'C:\Traces'"/>
  </Variables>

  <Procedures>
    <Procedure Identifier="ReadConfig">
      <Constants>
        <Constant Identifier="secVISA" Type="string"  Expression="'VISA'"/>
        <Constant Identifier="secCheck" Type="string"  Expression="'Check'"/>
        <Constant Identifier="secConfig" Type="string"  Expression="'Config'"/>
        <Constant Identifier="keyValidParameters" Type="string"  Expression="'ValidParameters'"/>
        <Constant Identifier="keyOutputDirectory" Type="string"  Expression="'OutputDirectory'"/>
        <Constant Identifier="keyScopeRN" Type="string"  Expression="'ScopeRN'"/>
      </Constants>
      <Block>
        <rep:Reporter.Information Text="Format('[%s]', secCheck)" Markup="Header3"/>
        <Variable Identifier="ValidParameters" Type="Boolean" Init="ConfigInifile.ReadBool(secCheck, keyValidParameters, false)"/>
        <rep:Reporter.Information Text="Format('%s=%s', keyValidParameters, IfElse(ValidParameters, '1', '0'))"/>

        <rep:Reporter.Information Text="''"/>
        <rep:Reporter.Information Text="Format('[%s]', secConfig)" Markup="Header3"/>
        <Execute Statement="OutputDirectory:= ConfigInifile.ReadString(secConfig, keyOutputDirectory, OutputDirectory) "/>
        <rep:Reporter.Information Text="Format('%s=%s', keyOutputDirectory, OutputDirectory)"/>

        <rep:Reporter.Information Text="''"/>
        <rep:Reporter.Information Text="Format('[%s]', secVISA)" Markup="Header3"/>
        <Execute Statement="ScopeRN:= ConfigInifile.ReadString(secVISA, keyScopeRN, ScopeRN) "/>
        <rep:Reporter.Information Text="Format('%s=%s', keyScopeRN, ScopeRN)"/>

        <Raise Expression="Exception.Create('Please check the config and set validparameters=1')" Condition="not ValidParameters"/>
      </Block>
    </Procedure>

    <Function Identifier="GetVisaSession" Type="IVisaSession">
      <Parameters>
        <Parameter Identifier="DeviceName" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= IntNil"/>
        <Variable Identifier="RetValue"/>
        <RepeatUntilLoop Expression="Assigned(Result)">
          <Execute Statement="RetValue:= ResourceManager.Open(DeviceName, TAccessMode.NO_LOCK, 1000, '', Result)"/>
          <rep:Reporter.Information Text="Format('RetValue: %d', RetValue)" Condition="IsDebugging"/>
          <ExitOnAbortRequest/>
        </RepeatUntilLoop>
      </Block>
    </Function>

    <Procedure Identifier="Execute">
      <Block>
        <rep:Reporter.Information Text="'Capture traces'" Markup="Header1"/>
        <rep:Reporter.Information Text="''"/>
        <rep:Reporter.Information Text="'Config report'" Markup="Header2"/>
        <rep:Reporter.Information Text="''"/>
        <Execute Statement="ReadConfig"/>
        <rep:Reporter.Information Text="''"/>
        <Variable Identifier="Description"/>
        <Execute Statement="OleCheck(ResourceManager.Get_Description(Description))"/>
        <rep:Reporter.Information Text="Format('Description: %s', Description)"/>

        <Variable Identifier="ScopeVS" Type="IVisaSession" Init="GetVisaSession(ScopeRN)"/>
        <ExitOnAbortRequest/>
        <Object.Use Identifier="Scope" Type="TSiglentSDS1104X" Expression="TSiglentSDS1104X.Create(ScopeVS)">
          <rep:Reporter.Information Text="Scope.IDN"/>
          <Execute Statement="Scope.CommHeader:= THeaderType.Off"/>

          <Variable Identifier="DirectoryPath" Type="string" Init="ExcludeTrailingPathDelimiter(OutputDirectory)"/>
          <syu:CreateDirectory Path="DirectoryPath"/>
          <Execute Statement="Scope.ScreenCapureToFile(DirectoryPath + '\Screen capture.png', TImageType.PNG)"/>
          <Execute Statement="Scope.WaveCapureToFile(TTraceType.CH1, DirectoryPath + '\CH1.xml')" Condition="Scope.Enabled[THWTraceType.CH1]"/>
          <Execute Statement="Scope.WaveCapureToFile(TTraceType.CH2, DirectoryPath + '\CH2.xml')" Condition="Scope.Enabled[THWTraceType.CH2]"/>
          <Execute Statement="Scope.WaveCapureToFile(TTraceType.CH3, DirectoryPath + '\CH3.xml')" Condition="Scope.Enabled[THWTraceType.CH3]"/>
          <Execute Statement="Scope.WaveCapureToFile(TTraceType.CH4, DirectoryPath + '\CH4.xml')" Condition="Scope.Enabled[THWTraceType.CH4]"/>

          <Block Condition="not FileExists(DirectoryPath + '\WaveForm.xsd')">
            <Variable Identifier="ScriptPath" Type="string" Init="ExtractFilePath(ScriptFilename)"/>
            <Variable Identifier="ResourceDirectory" Type="string" Init="GetFilenameFromBase(ScriptPath, '..\Resources.Project')"/>
            <syu:CopyFile SourceFilename="ResourceDirectory + '\WaveForm.xsd'" TargetFilename="DirectoryPath + '\WaveForm.xsd'"/>
          </Block>

        </Object.Use>
      </Block>
    </Procedure>
  </Procedures>

  <Block>
    <Execute Statement="Execute"/>
  </Block>
</pkg:Program>